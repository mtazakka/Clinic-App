import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { read, create, update, remove } from './todoAPI';
import { READ_TODO, CREATE_TODO, UPDATE_TODO, REMOVE_TODO } from '../../utils/constants';

const initialState = {
  todos: [],
  status: 'idle'
};

export const readTodo = createAsyncThunk(
  READ_TODO,
  async () => {
    try {
      const { data } = await read();
      if (data.success) {
        return data.data.map(item => {
          item.sent = true
          return item
        })

      } else {
        return []
      }
    } catch (error) {
      console.error(error);
      return []
    }
  }
);

export const todoSlice = createSlice({
  name: 'todo',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addTodo: (state, action) => {
      state.todos = [
        ...state.todos,
        {
          _id: action.payload._id,
          title: action.payload.title,
          sent: true
        }
      ]
    },
    updateTodo: (state, action) => {
      state.todos = [];
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    removeTodo: (state, action) => {
      state.todos = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(readTodo.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(readTodo.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const { addTodo, updateTodo, removeTodo } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default counterSlice.reducer;
