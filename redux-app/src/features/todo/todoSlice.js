import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import * as API from './todoAPI';
import { READ_TODO, CREATE_TODO, UPDATE_TODO, REMOVE_TODO } from '../../utils/constants';

const initialState = {
  todos: [],
  status: 'idle'
};

export const readTodo = createAsyncThunk(
  READ_TODO,
  async () => {
    try {
      const { data } = await API.read();
      if (data.success) {
        return data.data.map(item => {
          item.sent = true
          return item
        })

      } else {
        return []
      }
    } catch (error) {
      console.error(error);
      return []
    }
  }
);

export const createTodoAsync = createAsyncThunk(
  CREATE_TODO,
  async (todos, _id, title) => {
    try {
      const { data } = await API.create(title);
      if (data.success) {
        return todos.map(item => {
          if (item._id === _id) {
            return { ...data.data, sent: true }
          }
          return item
        })
      } else {
        return todos.map(item => {
          if (item._id === _id) {
            item.sent = false
          }
          return item
        })
      }
    } catch (error) {
      return todos.map(item => {
        if (item._id === _id) {
          item.sent = false
        }
        return item
      })
    }
  }

);

export const todoSlice = createSlice({
  name: 'todo',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    create: (state, action) => {
      state.todos = [
        ...state.todos,
        {
          _id: action.payload._id,
          title: action.payload.title,
          sent: true
        }
      ]
    },
    update: (state, action) => {
      state.todos = [];
    },
    remove: (state, action) => {
      state.todos = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(readTodo.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(readTodo.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

const { create, update, remove } = todoSlice.actions;

export const selectTodos = (state) => state.todo.todos;


export const createTodo = (title) => (dispatch, getState) => {
  const _id = Date.now()
  dispatch(create({ _id, title }))
  const todos = selectTodos(getState());
  dispatch(createTodoAsync(todos, _id, title))
};

export default todoSlice.reducer;
